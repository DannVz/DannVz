# -*- coding: utf-8 -*-
"""Python

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Zkf7t6QFZZSva3zZN_2HvZ_L2a7jX5E0

#**What is python?**`

![IMAGEN.pnj](http://lineadecodigo.com/wp-content/uploads/2015/11/python_logo.png)

Python is a high-level, object-oriented programming language with integrated dynamic semantics, primarily for web and computer application development. dynamic binding.

Python is relatively simple, making it easy to learn, as it requires a unique syntax that focuses on readability. Developers can read and translate and this reduces the cost of program maintenance and development by allowing teams to work collaboratively without significant barriers of language and experimentation.

Furthermore, it supports the use of modules and packages, which means that programs can be designed in a modular style and the code can be reused in various projects. Once a module or package has been developed, it can be scaled for use in other projects.

On the other hand, one of the most important benefits of Python is that both the standard library and the interpreter are freely available, both in binary form and in source form.

It is a cross-platform option, quite tempting for developers who do not want to worry about paying high development costs.


![imagen.png](https://cdn.computerhoy.com/sites/navi.axelspringer.es/public/styles/480/public/media/image/2019/06/python.jpg?itok=XqTS1eVy)

# **Python history**

Python was created by computer scientist Guido van Rossum, who had been working with a language called ABC in his previous job at the Centrum Wiskunde & Informática (CWI) - National Research Institute in Mathematics and Informatics in the Netherlands.

Although he liked some aspects of ABC, he was frustrated by how difficult this language was to spread.

The history of Python as a programming language begins one Christmas in the late 80s (1989) and the early 90s (1991) was when the first public version was developed under the name USENET.

Being already a development history of 32 years.

![IMAGEN.PNJ](https://image.slidesharecdn.com/lineadetiempo-140401210023-phpapp01/95/linea-de-tiempo-1-638.jpg?cb=1396386044)

# **How Python works?**

The Python programming language uses code modules that are interchangeable rather than the long list of instructions that was standard for functional programming languages.

The standard Python implementation is called "cpython". Ultimately, it does not convert your code into machine language or machine code, something that hardware can understand.

Actually, it turns it into something called byte code. This byte code cannot be understood by the CPU. So we need an interpreter called Python Virtual Machine (PVM) that executes the bytecodes.

The Python interpreter performs the following tasks to run a program:

* Step 1: The interpreter reads a python code or instruction. Then it checks that the instruction is well formatted, that is, it checks the syntax of each line. If it finds any errors, it immediately stops the translation and displays an error message.

* Step 2: If there are no errors, that is, if the instruction or python code is well formatted, the interpreter translates it into its equivalent form in an intermediate language called "Byte code". Thus, after successful execution of script or python code, it is completely translated into Byte code.

* Step 3: The byte code is sent to the Python Virtual Machine, where the byte code is again executed in PVM. If an error occurs during this run, the run stops with an error message.

![IMAGEN.PNJ](https://www.cacheme.org/wp-content/uploads/2014/01/empresas-python.png)

# **Print statement**

Python's print () function takes any number of parameters and prints them to one line of text. Each of the elements is converted to text format, separated by spaces, and there is a single '\ n' at the end (the "new line" character). When called with zero parameters, print () only prints the '\ n' and nothing else. In the interpreter, the standard output is displayed on the screen between the '>>>' prompts, so it's an easy way to see what print () means.

## **Example**
"""

>>> print ("Hello word")

>>> print (13, 11, 2)

>>> print ("Hola", "estas ahí ?",)

>>> print ("Buenas buenas")  # 1 artículo , 1 \ n

>>> print ()         # 0 articulos, 1 \ n

>>>

"""# **If-else statement**

The if ... else ... control structure allows a program to execute some instructions when a condition is met and other instructions when that condition is not met. In English "if" means "if" (condition) and "else" means "if not". The command in Python is written like this:

if condition:
    here are the orders that are executed if the condition is true
    

else:
    and here are the orders that are executed if the condition is
    false

## **The execution of this construction is as follows::**

###The condition is always evaluated.

* If the result is True, only statement block 1 is executed

* If the result is False, only statement block 2 is executed.
"""

edad = int(input("¿Cuántos años tiene? "))
if edad < 0:
    print("No puede tener años negativos")
elif edad < 18:
    print("Es usted menor de edad")
else:
    print("Es usted mayor de edad")

"""# **Loops**

The for loop is used to go through the elements of an iterable object (list, tuple, set, dictionary, ...) and execute a block of code. In each step of the iteration, a single element of the iterable object is taken into account, on which a series of operations can be applied.

Its syntax is as follows:

for < elem > in < iterable >:
  < Tu código >

Here, elem is the variable that takes the value of the element within the iterator at each step of the loop. This ends its execution when all the elements are crossed.
"""

print("Esto es un bucle")
A=14
for i in range(A):
    print(i, "Hola")
print("Y hasta aqui llego el blucle")